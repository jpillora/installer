name: CI
on:
  pull_request: {}
  push: {}
  workflow_dispatch:
    inputs: {}

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21.5'
          check-latest: true
          cache: true
      - name: Build
        run: go build -v -o /dev/null .
      - name: Test
        run: go test -v ./...
      - name: Run GoReleaser
        if: startsWith(github.ref, 'refs/tags/v')
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist --config .github/goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    name: Deploy to Docker Image
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Image Tag from branch name
        if: startsWith(github.ref, 'refs/heads/release')
        run: |
          set +e
          IMAGE_TAG=$(echo ${GITHUB_REF#refs/heads/} | sed 's/release-//g')
          echo "$IMAGE_TAG" | grep -i '\-nightly$'
          if [ $? -ne 0 ]; then
            IMAGE_TAG="$IMAGE_TAG-nightly"
          fi
          set -e

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "OVERRIDE_PUSHED_IMAGE=true" >> $GITHUB_ENV

      - name: Create Image Tag from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE_TAG=$(echo ${GITHUB_REF#refs/tags/})

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "OVERRIDE_PUSHED_IMAGE=false" >> $GITHUB_ENV

      - name: Build & Push Image
        if: startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/tags/')
        run: |
          set +e
          image_name="ghcr.io/${{ github.repository }}/bin-installer

          docker manifest inspect $image_name:$IMAGE_TAG
          exit_status=$?
          if [ $exit_status -eq 0 ]; then
            [ "$OVERRIDE_PUSHED_IMAGE" = "false" ] && echo "image ($image_name:$IMAGE_TAG) already exists, and override image is disable, exiting" && exit 0
            echo "image exists, but override pushed image is set to true. proceeding with building image"
          fi

          set -e

          docker build -t $image_name:$IMAGE_TAG .
          docker push $image_name:$IMAGE_TAG
